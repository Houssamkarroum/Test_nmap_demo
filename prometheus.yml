# prometheus.yml
global:
  scrape_interval: 5s # How frequently to scrape targets

scrape_configs:
  # Orchestrator metrics
  - job_name: 'orchestrator'
    static_configs:
      - targets: ['orchestrator:8000'] # Matches the orchestrator service name and port from docker-compose.yml

  # Worker metrics
  - job_name: 'worker'
    static_configs:
      - targets: ['worker:8001'] # Prometheus will resolve 'worker' to all IPs of scaled worker containers on port 8001
    relabel_configs:
      # This relabel config ensures each worker instance has a distinct label.
      # Docker Compose automatically appends `_1`, `_2`, etc. to container names when scaling.
      # __meta_docker_container_name holds the full container name (e.g., poc_worker_1)
      - source_labels: [__meta_docker_container_name]
        regex: 'poc_worker_([0-9]+)' # Extracts the numerical ID (e.g., '1', '2', '3') from "poc_worker_X"
        target_label: worker_id # Create a new label named 'worker_id'
        replacement: '$1' # Use the extracted ID as the label value
      # The default 'instance' label will typically be the IP:Port (e.g., 172.18.0.4:8001)
      # This relabeling effectively keeps it that way, if desired.
      - source_labels: [__address__]
        target_label: instance

  # Redis Exporter metrics
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Postgres Exporter metrics
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']