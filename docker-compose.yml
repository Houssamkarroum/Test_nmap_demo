version: '3.8'

services:
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PROMETHEUS_METRICS_PORT: 8000 # Orchestrator's metrics port
      POSTGRES_HOST: postgres # This is the service name for PostgreSQL
      POSTGRES_DB: nmap_results
      POSTGRES_USER: nmap_user
      POSTGRES_PASSWORD: nmap_password    
    ports:
      - "8000:8000" # Expose orchestrator metrics port to host

  redis:
    image: redis:latest
    container_name: poc_redis
    ports:
      - "6379:6379"
    restart: always

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: poc_redis_exporter
    environment:
      REDIS_ADDR: redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: always

  # Unified Worker Service Definition
  worker: # This is the service name for all scaled workers
    build:
      context: .
      dockerfile: Dockerfile.worker
    depends_on:
      - redis
      - postgres
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_DB: nmap_results
      POSTGRES_USER: nmap_user
      POSTGRES_PASSWORD: nmap_password
      WORKER_THREADS: 10
      PROMETHEUS_METRICS_PORT: 8001 # All worker containers expose metrics on this *internal* port
      # IMPORTANT: We do NOT expose ports for the 'worker' service here.
      # Prometheus will connect to the workers using their internal Docker network IPs.
    restart: on-failure

  postgres:
    image: postgres:13
    container_name: poc_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: nmap_results
      POSTGRES_USER: nmap_user
      POSTGRES_PASSWORD: nmap_password
    volumes:
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/init.sql # Mounts SQL script for initial DB setup
      - postgres_data:/var/lib/postgresql/data
    restart: always

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: poc_postgres_exporter
    environment:
      DATA_SOURCE_NAME: postgresql://nmap_user:nmap_password@postgres:5432/nmap_results?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: poc_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    # Depends on the services it scrapes to ensure they are up
    depends_on:
      - orchestrator
      - worker # Depend on the generic 'worker' service for startup order
      - redis-exporter
      - postgres-exporter
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: poc_grafana
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - prometheus
    environment:
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=karroumdev@gmail.com
      - GF_SMTP_PASSWORD=ixdfdtvoreguwrla
      - GF_SMTP_FROM_ADDRESS=karroumdev@gmail.com
      - GF_SMTP_FROM_NAME=grafana
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always

volumes:
  postgres_data:
  grafana_data:
  